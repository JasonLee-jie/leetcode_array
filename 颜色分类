class Solution {
    public void sortColors(int[] nums) {
        Arrays.sort(nums);
    }
}
//计数排序
class Solution {
    public void sortColors(int[] nums) {
        //找最大的
		int max = nums[0];
		for(int i = 1; i < nums.length; i++) {
			max = Math.max(nums[i], max);
		}
		//加入辅助函数
		int arr[] = new int[max+1];
		for(int i = 0; i < nums.length; i++) {
			arr[nums[i]]++;
		}
		//更改原数组
		int k = 0;
		for(int i = 0; i < arr.length; i++) {
			for(int j = arr[i]; j > 0; j--) {
				nums[k++] = i;
			}
		}
    }
}
//快速排序
class Solution {
    public void sortColors(int[] nums) {
       quickSort(nums,0,nums.length-1);
		
	}

	private int[] quickSort(int[] nums, int left, int right) {
		if(left < right) {
			int mid = mark(nums,left,right);
			nums = quickSort(nums,left,mid-1);
			nums = quickSort(nums,mid+1,right);
		}
		return nums;
	}

	private int mark(int[] nums, int left, int right) {
		int mid = nums[left];
		int i = left + 1;
		int j = right;
		while(true) {
			while( i <= j && nums[i] <= mid) {
				i++;
			}
			while(i <= j && nums[j] >= mid) {
				j--;
			}
			if(i >= j) {
				break;
			}
			
			int temp = nums[i];
			nums[i] = nums[j];
			nums[j] = temp;
		}
		nums[left] = nums[j];
		nums[j] = mid;
		return j;
    }
}


基数排序法
可以采用基数排序法的思想，用一个数组记录下 0，1，3 的次数，后重排，这个算法对数组进行了两次遍历，其实有一种只进行一次遍历的方法。

三路快速排序方法
设置三个 lt, gt, i 定义：nums[0...lt] == 0，nums[lt+1...i-1] = 1，nums[gt...n-1] == 2，遍历一遍改数列保持这个定义。

